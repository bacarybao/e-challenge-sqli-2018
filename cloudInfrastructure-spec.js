// DO NOT EDIT THIS FILE

/*
 * L’objectif de cet exercice est de construire un outil léger pour gérer une infrastructure cloud.
 * On se limitera dans cet outil de gérer des espaces de stockage (comme Google Drive), et des
 * machines virtuelles (comme Google Cloud Platform), via quelques opérations simple de gestion.
 *
 * The goal of this exercise is to build a lightweight tool to handle a cloud infrastructure. We
 * will limit ourselves in this tool to manage storages (like Google Drive), and virtual machines
 * (like Google Cloud Platform), using some simple management operations.
 */
QUnit.module('CloudInfrastructure', function(hooks) {
    
    var cloud;

    hooks.beforeEach( function( assert ) {
        /*
        * This is the main CloudInfrastructure object. You will need to create it and implement it.
        * You can create other objects if needed that can be used inside CloudInfrastructure.
        */
        cloud = new CloudInfrastructure();
    });

    /*
     * Create Store in the cloud, identified by its name. Upload documents in that storage.
     * The method cloud.listStores() display all existing stores with all their content.
     */
    QUnit.test('Can create a store with a document in cloud', function(assert) {
        cloud.createStore("myFiles");
        cloud.uploadDocument("myFiles", "book.pdf"); // upload "book.pdf" in the "myFiles" store
        assert.deepEqual(cloud.listStores(), "myFiles:book.pdf");
        // the used format is : storeName:document1, document2, document3...
   });

    /*
     * We can create multiple stores in the cloud, and upload several documents to each one of them.
     * When a store does not contain any documents, "empty" is displayed.
     */
    QUnit.test('Can create multiple stores with multiple documents', function(assert) {
        cloud.createStore("myFiles");
        cloud.createStore("myImages");
        cloud.uploadDocument("myImages", "picture.jpeg", "profile.png");

        // an empty store is display as "empty"
        assert.deepEqual(cloud.listStores(), "myFiles:empty||myImages:picture.jpeg, profile.png");
    });

    /*
     * We can also delete or empty a store. 
     */
    QUnit.test('Can delete or empty stores', function(assert) {
        cloud.createStore("myFiles");
        cloud.createStore("myImages");
        cloud.uploadDocument("myImages", "picture.jpeg", "profile.png");

        cloud.deleteStore("myFiles"); // delete completly the store "myFiles"
        assert.deepEqual(cloud.listStores(), "myImages:picture.jpeg, profile.png");

        cloud.emptyStore("myImages"); // the store has no more documents, but still there
        assert.deepEqual(cloud.listStores(), "myImages:empty");
    });

    /*
     * We move here to the second part of the test, virtual machines (VM). We can create several VMs
     * in the cloud. Each VM can have three possible statuses : Inactive, Running or Stopped. A new
     * VM is always Inactive at its creation. We can then start or stop it.
     */
    QUnit.test('Should create a machine', function(assert) {
        // create a new machine takes 4 parameters : name, operating system, disk size, memory.
        cloud.createMachine("machine1", "Linux", "50gb", "8gb");
        cloud.createMachine("machine2", "Windows", "20gb", "4gb");
        
        // Remember, all machines are inactive by default.
        assert.deepEqual(cloud.listMachines(), "machine1:Inactive||machine2:Inactive");

        cloud.startMachine("machine1"); // start the machine "machine1"
        assert.deepEqual(cloud.listMachines(), "machine1:Running||machine2:Inactive");

		cloud.stopMachine("machine1"); // stop the machine "machine1"
		cloud.startMachine("machine2"); // start the machine "machine2"
        assert.deepEqual(cloud.listMachines(), "machine1:Stopped||machine2:Running");
    });

    /*
     * For every VM, we can check the used Disk and memory. The memory is consumed only when a
     * machine is running. The disk size is always used, even if the VM is not running.
     */
    QUnit.test('Can check used disk and memory per machine', function(assert) {
        cloud.createMachine("machine1", "Linux", "50gb", "8gb");

        assert.deepEqual(cloud.usedMemory("machine1"), 0); // Only running machines consume memory
        assert.deepEqual(cloud.usedDisk("machine1"), 50); // the disk is always consumed

        cloud.startMachine("machine1");
        assert.deepEqual(cloud.usedDisk("machine1"), 50);
        // as the machine is now running, all its memory is used.
        assert.deepEqual(cloud.usedMemory("machine1"), 8);

        cloud.stopMachine("machine1");
        assert.deepEqual(cloud.usedDisk("machine1"), 50);
        // The memory will be released as the machine has been stopped
        assert.deepEqual(cloud.usedMemory("machine1"), 0);
    });

    /*
     * Same as VMs, we can check the used disk in a storage. A storage does not consume any memory,
     * only disk space.
     * 
     * To simplify the exercise, we will suppose that all documents have one size = 100mb = 0.100gb.
     * The disk used by a store is the sum of the sizes of all documents inside.
     */
    QUnit.test('Can check used disk perstore', function(assert) {
        cloud.createStore("myImages");
        cloud.uploadDocument("myImages", "picture.jpeg");

        // One document exists in "myImages", the used disk should be 0.1gb
        assert.deepEqual(cloud.usedDisk("myImages"), 0.100);

        cloud.uploadDocument("myImages", "profile.png");
        // 2 documents now, used disk should be 200mb
        assert.deepEqual(cloud.usedDisk("myImages"), 0.200);
    });
    
    /**
     * In this test, we can check the used disk and used memory of all machines and stores existing
     * in the cloud.
     */
    QUnit.test('Should aggregate data for all machines and stores in the cloud', function(assert) {
        // Global space used by Machines and stores
        cloud.createMachine("machine1", "Linux", "50gb", "8gb");
        cloud.createMachine("machine2", "Windows", "20gb", "4gb");
        assert.deepEqual(cloud.listMachines(), "machine1:Inactive||machine2:Inactive");

        // globalUsedDisk method should return the used disk of all machines and stores existing in the cloud, same for globalUsedMemory.
        // For now 2 machines exists, with 50gb and 20gb disk sizes = 70gb
        assert.deepEqual(cloud.globalUsedDisk(), 70);
        assert.deepEqual(cloud.globalUsedMemory(), 0); // machines are inactive, no memory is used

        cloud.startMachine("machine1");
        assert.deepEqual(cloud.globalUsedDisk(), 70);
        assert.deepEqual(cloud.globalUsedMemory(), 8); 

        cloud.startMachine("machine2");
        assert.deepEqual(cloud.globalUsedDisk(), 70);
        assert.deepEqual(cloud.globalUsedMemory(), 12); 

        cloud.createStore("myImages");
        cloud.uploadDocument("myImages", "picture.jpeg");
        assert.deepEqual(cloud.globalUsedDisk(), 70.1);
        assert.deepEqual(cloud.globalUsedMemory(), 12); 

        cloud.stopMachine("machine1");
        assert.deepEqual(cloud.globalUsedDisk(), 70.1);
        assert.deepEqual(cloud.globalUsedMemory(), 4); 

        cloud.emptyStore("myImages");
        assert.deepEqual(cloud.globalUsedDisk(), 70);
        assert.deepEqual(cloud.globalUsedMemory(), 4); 
    });

});